リモート = リモートリポジトリ

■リモートブランチ
"ローカル"に存在するもともとリモートに存在していたブランチと同じコミットを指すブランチ
リモートブランチは「ローカル」に存在する。リモートにあるブランチを表す言葉ではない！

■Fetch
リモートにあるコミットを、こちらに吸収する操作
コミットはスナップショットであり、スナップショットの集合をローカルにコピーするだけ。
同じコミットが存在すればそれは取得しない（はず）
リモートに存在するブランチ（コミットへのポインタ）は名前を変えてリモートブランチとしてコピーされる
ワーキングコピーは何も変わらない

■pull
fetch + merge
よく考えてみればわかるが、mergeはブランチの指定が必要
git pullをした時にどのローカルブランチとどのリモートブランチがマージされるかは先に指定しておかなくては
いけない。 = (upstream/tracking)
checkout または pushのときにその対応関係を指定する

■push
git pushはoriginが対象。それ以外はリモートの指定が必要

■■普通のリモートリポジトリ操作 (通常の操作はここにあるもので足りる）
空のgithubリポジトリを作成しなさい
githubの指示に従い新たなファイルを作成しなさい
変更をgithub上から確認しなさい
新たなブランチを作成しなさい
作成したブランチ上で適当な修正を加えてコミットしなさい
新たに作成したブランチをリモートにpushしなさい  git push origin [branch]
再度新たなブランチを作成しなさい
作成したブランチ上で適当な修正を加えてコミットしなさい
新たに作成したブランチをリモートに"別名で"pushしなさい  git push origin [branch]:[newname]
リモートの新たに作成したブランチを削除しなさい git push origin :[branch]

別ディレクトリにリモートリポジトリをくろーんしなさい git clone
適当な修正を加えてpushしなさい


■■プレーンな形のリモートリポジトリ操作（動作原理理解 実験的）
前回作成したローカルリポジトリ(GitTest?)のリモートとして、今回作成したgithubリポジトリを登録しなさい  git remote add
リモートの内容をfetchしなさい
リモートのmasterブランチをチェックアウトしなさい git checkout anothermaster [remote]/master
適当な修正を加えてコミットしなさい
リモートにpushしなさい。 git push [remote] anothermaster:master

存在するローカルブランチおよびリモートブランチを確認しなさい。 git branch -a
トラッキングブランチを確認しなさい git remote show

リモートの適当なブランチとローカルの適当なブランチをマージし、リモートにpushしなさい


■githubの使い方
誰かのGitTestリポジトリをフォークしなさい
ローカルにそのクローンを作成しなさい
ローカルに新たな修正用ブランチを作成し、適当な修正を加えてコミットしなさい
修正用ブランチをpushしなさい
修正のPull Requestを作成しなさい( masterに対してrequestを作成 ・・・だと思う)

■■以降、pull requestを受けた側
PullRequestを受けた側は、ローカルにそのrequestをpullしなさい（git pull [相手のremote]）
Pullされたリモートブランチをチェックアウトしなさい
マージ、コミットし、自分のgithubリポジトリにpushしなさい

再度同様にpull requestを作成しなさい
Pull requestを受けた側はgithub上でマージしなさい
github上でマージした内容をローカルにpullしなさい

github上にissueを作成しなさい
issueをクローズする修正を作成し、コミットしpushしなさい (コミットメッセージに close #xxxを含める）

■疑問
名前のついていないリモートのブランチはどのようなリモートブランチ名がつくのだろうか？
cloneしたりfetchしたときに自動的にmasterがトラッキングされるけど、どうやったら解除できるんだろうか

